<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[排序算法]]></title>
    <url>%2F2018%2F03%2F29%2F%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%2F</url>
    <content type="text"><![CDATA[稳定性和时间复杂度 名称 平均情况 最好 最差 辅助空间 稳定性 冒泡 o(n2) o(n) o(n2) o(1) 稳定 插入 o(n2) o(n) o(n2) o(1) 稳定 归并 o(nlogn) o(nlogn) o(nlogn) o(n) 稳定 选择 o(n2) o(n2)) o(n2) o(1) 不稳定 希尔 o(nlogn)~o(n2) o(n1.3)) o(n2) o(1) 不稳定 堆 o(nlogn) o(nlogn) o(nlogn) o(1) 不稳定 快速 o(nlogn) o(nlogn) o(n2) o(nlogn)~o(n) 不稳定 插入排序 插入排序的基本操作就是将一个数据插入到已经排好序的有序数据中，从而得到一个新的、个数加一的有序数据，算法适用于少量数据的排序，时间复杂度为O(n^2)。是稳定的排序方法。插入算法把要排序的数组分成两部分：第一部分包含了这个数组的所有元素，但将最后一个元素除外（让数组多一个空间才有插入的位置），而第二部分就只包含这一个元素（即待插入元素）。在第一部分排序完成后，再将这个最后元素插入到已排好序的第一部分中。 12345678910111213def insert_sort(lists): # 插入排序 count = len(lists) for i in range(1, count): key = lists[i] j = i - 1 while j &gt;= 0: if lists[j] &gt; key: lists[j + 1] = lists[j] lists[j] = key j -= 1 print(lists) return lists 1insert_sort([6,3,4,5,2,1,0]) [3, 6, 4, 5, 2, 1, 0] [3, 4, 6, 5, 2, 1, 0] [3, 4, 5, 6, 2, 1, 0] [2, 3, 4, 5, 6, 1, 0] [1, 2, 3, 4, 5, 6, 0] [0, 1, 2, 3, 4, 5, 6] [0, 1, 2, 3, 4, 5, 6] 希尔排序 希尔排序(Shell Sort)是插入排序的一种。也称缩小增量排序，是直接插入排序算法的一种更高效的改进版本。希尔排序是非稳定排序算法。该方法因DL．Shell于1959年提出而得名。 希尔排序是把记录按下标的一定增量分组，对每组使用直接插入排序算法排序；随着增量逐渐减少，每组包含的关键词越来越多，当增量减至1时，整个文件恰被分成一组，算法便终止。 1234567891011121314151617181920def shell_sort(lists): # 希尔排序 count = len(lists) step = 2 group = int(count / step) while group &gt; 0: for i in range(0, group): j = i + group while j &lt; count: k = j - group key = lists[j] while k &gt;= 0: if lists[k] &gt; key: lists[k + group] = lists[k] lists[k] = key k -= group j += group group = int(group/step) print(lists) return lists 1shell_sort([6,3,4,5,2,1,0]) [0, 2, 1, 5, 3, 4, 6] [0, 1, 2, 3, 4, 5, 6] [0, 1, 2, 3, 4, 5, 6] 冒泡排序 它重复地走访过要排序的数列，一次比较两个元素，如果他们的顺序错误就把他们交换过来。走访数列的工作是重复地进行直到没有再需要交换，也就是说该数列已经排序完成。 123456789def bubble_sort(lists): # 冒泡排序 count = len(lists) for i in range(0, count): for j in range(i + 1, count): if lists[i] &gt; lists[j]: lists[i], lists[j] = lists[j], lists[i] print(lists) return lists 1bubble_sort([6,3,4,5,2,1,0]) [0, 6, 4, 5, 3, 2, 1] [0, 1, 6, 5, 4, 3, 2] [0, 1, 2, 6, 5, 4, 3] [0, 1, 2, 3, 6, 5, 4] [0, 1, 2, 3, 4, 6, 5] [0, 1, 2, 3, 4, 5, 6] [0, 1, 2, 3, 4, 5, 6] [0, 1, 2, 3, 4, 5, 6] 快速排序 通过一趟排序将要排序的数据分割成独立的两部分，其中一部分的所有数据都比另外一部分的所有数据都要小，然后再按此方法对这两部分数据分别进行快速排序，整个排序过程可以递归进行，以此达到整个数据变成有序序列。 123456789101112131415161718def quick_sort(lists, left, right): # 快速排序 if left &gt;= right: return lists key = lists[left] low = left high = right while left &lt; right: while left &lt; right and lists[right] &gt;= key: right -= 1 lists[left] = lists[right] while left &lt; right and lists[left] &lt;= key: left += 1 lists[right] = lists[left] lists[right] = key quick_sort(lists, low, left - 1) quick_sort(lists, left + 1, high) return lists 直接选择排序 基本思想：第1趟，在待排序记录r1 ~ r[n]中选出最小的记录，将它与r1交换；第2趟，在待排序记录r2 ~ r[n]中选出最小的记录，将它与r2交换；以此类推，第i趟在待排序记录r[i] ~ r[n]中选出最小的记录，将它与r[i]交换，使有序序列不断增长直到全部排序完毕。 1234567891011def select_sort(lists): # 选择排序 count = len(lists) for i in range(0, count): min = i for j in range(i + 1, count): if lists[min] &gt; lists[j]: min = j lists[min], lists[i] = lists[i], lists[min] print(lists) return lists 1select_sort([6,3,4,5,2,1,0]) [0, 3, 4, 5, 2, 1, 6] [0, 1, 4, 5, 2, 3, 6] [0, 1, 2, 5, 4, 3, 6] [0, 1, 2, 3, 4, 5, 6] [0, 1, 2, 3, 4, 5, 6] [0, 1, 2, 3, 4, 5, 6] [0, 1, 2, 3, 4, 5, 6] [0, 1, 2, 3, 4, 5, 6] 堆排序 堆排序(Heapsort)是指利用堆积树（堆）这种数据结构所设计的一种排序算法，它是选择排序的一种。可以利用数组的特点快速定位指定索引的元素。堆分为大根堆和小根堆，是完全二叉树。大根堆的要求是每个节点的值都不大于其父节点的值，即A[PARENT[i]] &gt;= A[i]。在数组的非降序排序中，需要使用的就是大根堆，因为根据大根堆的要求可知，最大的值一定在堆顶。 1234567891011121314151617181920212223def adjust_heap(lists, i, size): lchild = 2 * i + 1 rchild = 2 * i + 2 max = i if i &lt; size / 2: if lchild &lt; size and lists[lchild] &gt; lists[max]: max = lchild if rchild &lt; size and lists[rchild] &gt; lists[max]: max = rchild if max != i: lists[max], lists[i] = lists[i], lists[max] adjust_heap(lists, max, size) def build_heap(lists, size): for i in range(0, (size/2))[::-1]: adjust_heap(lists, i, size) def heap_sort(lists): size = len(lists) build_heap(lists, size) for i in range(0, size)[::-1]: lists[0], lists[i] = lists[i], lists[0] adjust_heap(lists, 0, i) 归并排序 归并排序是建立在归并操作上的一种有效的排序算法,该算法是采用分治法（Divide and Conquer）的一个非常典型的应用。将已有序的子序列合并，得到完全有序的序列；即先使每个子序列有序，再使子序列段间有序。若将两个有序表合并成一个有序表，称为二路归并。 归并过程为：比较a[i]和a[j]的大小，若a[i]≤a[j]，则将第一个有序表中的元素a[i]复制到r[k]中，并令i和k分别加上1；否则将第二个有序表中的元素a[j]复制到r[k]中，并令j和k分别加上1，如此循环下去，直到其中一个有序表取完，然后再将另一个有序表中剩余的元素复制到r中从下标k到下标t的单元。归并排序的算法我们通常用递归实现，先把待排序区间[s,t]以中点二分，接着把左边子区间排序，再把右边子区间排序，最后把左区间和右区间用一次归并操作合并成有序的区间[s,t]。 12345678910111213141516171819202122def merge(left, right): i, j = 0, 0 result = [] while i &lt; len(left) and j &lt; len(right): if left[i] &lt;= right[j]: result.append(left[i]) i += 1 else: result.append(right[j]) j += 1 result += left[i:] result += right[j:] return result def merge_sort(lists): # 归并排序 if len(lists) &lt;= 1: return lists num = len(lists) / 2 left = merge_sort(lists[:num]) right = merge_sort(lists[num:]) return merge(left, right) 基数排序 基数排序（radix sort）属于“分配式排序”（distribution sort），又称“桶子法”（bucket sort）或bin sort，顾名思义，它是透过键值的部份资讯，将要排序的元素分配至某些“桶”中，藉以达到排序的作用，基数排序法是属于稳定性的排序，其时间复杂度为O (nlog(r)m)，其中r为所采取的基数，而m为堆数，在某些时候，基数排序法的效率高于其它的稳定性排序法。 123456789101112import mathdef radix_sort(lists, radix=10): k = int(math.ceil(math.log(max(lists), radix))) bucket = [[] for i in range(radix)] for i in range(1, k+1): for j in lists: bucket[j/(radix**(i-1)) % (radix**i)].append(j) del lists[:] for z in bucket: lists += z del z[:] return lists]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>排序</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[非线性方程求参数]]></title>
    <url>%2F2017%2F12%2F26%2F%E9%9D%9E%E7%BA%BF%E6%80%A7%E6%96%B9%E7%A8%8B%E6%B1%82%E5%8F%82%E6%95%B0%2F</url>
    <content type="text"><![CDATA[Intro 最近遇到了一个问题，要求一个由多个非线性方程组成的方程的 参数 已经目标方程的形式 求解对应非线性方程的未知参数 例如： $$ s(t)=a\cdot f1(t)+b\cdot f2(t)+c \cdot f(3t) $$ 其中: $$f1(t)= w \cdot sin(k\cdot t)$$ $$f2(t)= 1- \frac{1}{\sqrt1-w^2}\cdot e^{-\alpha}\cdot sin[(1-\sqrt{1-w^2})+arccos(w)]$$ $f(3)$是一个cdf 概率累计分布函数 Python 解法 首先找了个LMFIT的库,可以读文档使用 123456789101112131415161718192021222324252627282930313233343536from numpy import sqrt, pi, exp, sin, arccos, cosfrom lmfit import Modelfrom scipy import statsimport numpy as npimport matplotlib.pyplot as plt__author__ = &apos;wangj&apos;__date__ = &apos;2017/12/26 00:41&apos;def my_sin(x, w1, k): return w1 * sin(k * x)def my_damping(x, w2, a, b, c): return w2 * (1 - 1 / sqrt(1 - a ** 2) * exp(-c) * sin(sqrt(1 - a ** 2) * b * x + arccos(a)))def my_peak(x, m, n): return m * stats.poisson.cdf(x, n)if __name__ == &apos;__main__&apos;: x = np.linspace(1, 200, 100) y = 10 * cos(x) + sin(x) mod = Model(my_sin) + Model(my_damping)+ Model(my_peak) pars = mod.make_params(w1=0.0001, k=-0.4, w2=-0.001, a=0.1, b=1, c=-9,m=0,n=10) pars[&apos;a&apos;].set(min=0.01, max=0.9999) result = mod.fit(y, pars, x=x) print(result.fit_report()) plt.plot(x, y, &apos;bo&apos;) plt.plot(x, result.init_fit, &apos;k--&apos;) plt.plot(x, result.best_fit, &apos;r-&apos;) plt.show() 关键的问题在于初始params的选择，这边可以使用一下Matlab的lsqcurvefit函数，参考下初始值的设定 Matlab 123456789101112131415161718192021222324t=1:15:400;Ca = 10*cos(t)+sin(t);k0=[0.0001 0.0001 0.0001 0.0001 0.0001 1.0009 0.00000001 10];% x1 * sin(t) + x2 * (1 - 1 / (sqrt(1 - x3 * x3)) * exp(-x4) * sin(sqrt(1 -% x3 * x3)*t + acos(x3)))++k(7)*cdf(&apos;poiss&apos;,t,k(8))F=@(k,t)k(1) * sin(k(5)*t) + k(2) * (1 - 1 / (sqrt(1 - k(3) * k(3))) * exp(-k(4)) * sin(sqrt(1 - k(3) * k(3))*k(6)*t + acos(k(3))));%% ==========lsqcurvefit==================options = optimset(&apos;MaxFunEvals&apos;,20000);[p,resnorm,residual,exitflag,output,lambda,jacobian]=lsqcurvefit(F,k0,t,Ca,[],[],options)ci = nlparci(p,residual,jacobian)yp=F(p,t);fprintf(&apos;\n\n使用函数lsqcurvefit()估计得到的参数值为:\n&apos;)fprintf(&apos;\t待求参数 k1 = %.6e\n&apos;,p(1))fprintf(&apos;\t待求参数 k2 = %.6e\n&apos;,p(2))fprintf(&apos;\t待求参数 k3 = %.6e\n&apos;,p(3))fprintf(&apos;\t待求参数 k4 = %.6e\n&apos;,p(4))fprintf(&apos;\t待求参数 k5 = %.6e\n&apos;,p(5))fprintf(&apos;\t待求参数 k6 = %.6e\n&apos;,p(6))% fprintf(&apos;\t待求参数 k7 = %.6e\n&apos;,p(7))% fprintf(&apos;\t待求参数 k8 = %.6e\n&apos;,p(8))fprintf(&apos;The sum of the squares is: %.3e\n\n&apos;,resnorm)figure;plot(t,Ca,&apos;r*-&apos;,t,yp(1,:),&apos;bo-&apos;)legend(&apos;exp Ca&apos;,&apos;pre Ca&apos;) 问题 参数越多，拟合效果就很不好]]></content>
      <categories>
        <category>Python</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Matlab</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[numpy常用函数记录]]></title>
    <url>%2F2017%2F12%2F19%2Fnumpy%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0%E8%AE%B0%E5%BD%95%2F</url>
    <content type="text"><![CDATA[random模块 np.random.random Return random floats in the half-open interval [0.0, 1.0).产生随机矩阵，如random.random([2,3])产生一个2x3维的随机数 np.flatzero() 该函数输入一个矩阵，返回扁平化后矩阵中非零元素的位置（index） 123451 &gt;&gt;&gt; x = np.arange(-2, 3)2 &gt;&gt;&gt; x3 array([-2, -1, 0, 1, 2])4 &gt;&gt;&gt; np.flatnonzero(x)5 array([0, 1, 3, 4]) 这是在作业中给出的用法：不走寻常路，用来返回某个特定元素的位置 对向量元素的判断d==3返回了一个和向量等长的由0/1组成的矩阵，然后调用函数，返回的位置，就是对应要找的元素的位置。 np.random.choice() 可以从一个int数字或1维array里随机选取内容，并将选取结果放入n维array中返回。 numpy.random.choice(a, size=None, replace=True, p=None) replace 表示是否重复选取 1234567891011a : 1-D array-like or int If an ndarray, a random sample is generated from its elements. If an int, the random sample is generated as if a was np.arange(n)size : int or tuple of ints, optional replace : boolean, optional Whether the sample is with or without replacementp : 1-D array-like, optional The probabilities associated with each entry in a. If not given the sample assumes a uniform distribution over all entries in a. 12345678910111213141516&gt;&gt;&gt; np.random.choice(5, 3)array([0, 3, 4])&gt;&gt;&gt; np.random.choice(5, 3, p=[0.1, 0, 0.3, 0.6, 0])array([3, 3, 0])&gt;&gt;&gt; np.random.choice(5, 3, replace=False)array([3,1,0])&gt;&gt;&gt; np.random.choice(5, 3, replace=False, p=[0.1, 0, 0.3, 0.6, 0])array([2, 3, 0])&gt;&gt;&gt; aa_milne_arr = [&apos;pooh&apos;, &apos;rabbit&apos;, &apos;piglet&apos;, &apos;Christopher&apos;]&gt;&gt;&gt; np.random.choice(aa_milne_arr, 5, p=[0.5, 0.1, 0.1, 0.3])array([&apos;pooh&apos;, &apos;pooh&apos;, &apos;pooh&apos;, &apos;Christopher&apos;, &apos;piglet&apos;], np.maxmium() 12345&gt;&gt; np.maximum([-2, -1, 0, 1, 2], 0)array([0, 0, 0, 1, 2])# 当然 np.maximum 接受的两个参数，也可以大小一致# 或者更为准确地说，第二个参数只是一个单独的值时，其实是用到了维度的 broadcast 机制；]]></content>
      <categories>
        <category>numpy</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>numpy</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Ten Simple Rules for Better Figures]]></title>
    <url>%2F2017%2F12%2F14%2FTen-Simple-Rules-for-Better-Figures%2F</url>
    <content type="text"><![CDATA[科学可视化经典定义为图形化显示科学数据的过程。 但是，这个过程远非直接的或自动的。 有很多不同的方法来表示相同的数据：散点图，线性图，条形图和饼图，等等。 此外，使用相同类型的情节的相同数据可能被视为非常不同，取决于谁在看数字。 科学可视化的更准确的定义将是人与数据之间的图形界面。 在这篇短文中，我们旨在提供一套基本的规则来改善图形设计，并解释一些常见的陷阱。 Rule 1: Know Your Audience Rule 2: Identify Your Message Rule 3: Adapt the Figure to the Support Medium Rule 4: Captions Are Not Optional Rule 5: Do Not Trust the Defaults Rule 6: Use Color Effectively Rule 7: Do Not Mislead the Reader Rule 8: Avoid “Chartjunk” Rule 9: Message Trumps Beauty Rule 10: Get the Right Tool 1234567891011121314151617181920212223242526272829303132import matplotlib.pyplot as pltimport numpy as npplt.figure()languages =[&apos;Python&apos;, &apos;SQL&apos;, &apos;Java&apos;, &apos;C++&apos;, &apos;JavaScript&apos;]pos = np.arange(len(languages))popularity = [56, 39, 34, 34, 29]# change the bar color to be less bright bluebars = plt.bar(pos, popularity, align=&apos;center&apos;, linewidth=0, color=&apos;lightslategrey&apos;)# make one bar, the python bar, a contrasting colorbars[0].set_color(&apos;#1F77B4&apos;)# soften all labels by turning greyplt.xticks(pos, languages, alpha=0.8)# remove the Y label since bars are directly labeled#plt.ylabel(&apos;% Popularity&apos;, alpha=0.8)plt.title(&apos;Top 5 Languages for Math &amp; Data \nby % popularity on Stack Overflow&apos;, alpha=0.8)# remove all the ticks (both axes), and tick labels on the Y axisplt.tick_params(top=&apos;off&apos;, bottom=&apos;off&apos;, left=&apos;off&apos;, right=&apos;off&apos;, labelleft=&apos;off&apos;, labelbottom=&apos;on&apos;)# remove the frame of the chartfor spine in plt.gca().spines.values(): spine.set_visible(False) # direct label each bar with Y axis valuesfor bar in bars: plt.gca().text(bar.get_x() + bar.get_width()/2, bar.get_height() - 5, str(int(bar.get_height())) + &apos;%&apos;, ha=&apos;center&apos;, color=&apos;w&apos;, fontsize=11)plt.show()]]></content>
      <categories>
        <category>可视化</category>
      </categories>
      <tags>
        <tag>可视化</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[markdown语法]]></title>
    <url>%2F2017%2F12%2F10%2Fmarkdown%E8%AF%AD%E6%B3%95%2F</url>
    <content type="text"><![CDATA[概述 宗旨 兼容html 特殊字符自动转换 区块元素 段落和换行 标题 区块引用 列表 代码区块 分割线 区段元素 链接 强调 代码 图片 其它 自动链接 反斜杠 斜体和粗体 公式 $ 表示行内公式： $$ 表示整行公式： 表格 锚点 感谢 概述 宗旨 Markdown的目的是实现「易读易写」。 本文档参考Markdown: Basics （快速入门） 兼容html Markdown 语法的目标是：成为一种适用于网络的书写语言。 Markdown 不是想要取代 HTML，甚至也没有要和它相近，它的语法种类很少，只对应 HTML 标记的一小部分。Markdown 的构想不是要使得 HTML 文档更容易书写。在我看来， HTML 已经很容易写了。Markdown 的理念是，能让文档更容易读、写和随意改。HTML 是一种发布的格式，Markdown 是一种书写的格式。就这样，Markdown 的格式语法只涵盖纯文本可以涵盖的范围。 不在 Markdown 涵盖范围之内的标签，都可以直接在文档里面用 HTML 撰写。不需要额外标注这是 HTML 或是 Markdown；只要直接加标签就可以了。 要制约的只有一些 HTML 区块元素――比如 &lt;div&gt;、&lt;table&gt;、&lt;pre&gt;、&lt;p&gt; 等标签，必须在前后加上空行与其它内容区隔开，还要求它们的开始标签与结尾标签不能用制表符或空格来缩进。Markdown 的生成器有足够智能，不会在 HTML 区块标签外加上不必要的&lt;p&gt;标签。 例子如下，在 Markdown 文件里加上一段 HTML 表格： 12345678910这是一个普通段落。&lt;table&gt; &lt;tr&gt; &lt;td&gt;Foo&lt;/td&gt; &lt;td&gt;*强调*&lt;/td&gt; &lt;/tr&gt;&lt;/table&gt;这是另一个普通段落。 请注意，在 HTML 区块标签间的 Markdown 格式语法将不会被处理。比如，你在 HTML 区块内使用 Markdown 样式的*强调*会没有效果。 HTML 的区段（行内）标签如 &lt;span&gt;、&lt;cite&gt;、&lt;del&gt; 可以在 Markdown 的段落、列表或是标题里随意使用。依照个人习惯，甚至可以不用 Markdown 格式，而直接采用 HTML 标签来格式化。举例说明：如果比较喜欢 HTML 的 &lt;a&gt; 或 &lt;img&gt; 标签，可以直接使用这些标签，而不用 Markdown 提供的链接或是图像标签语法。 和处在 HTML 区块标签间不同，Markdown 语法在 HTML 区段标签间是有效的。 特殊字符自动转换 在 HTML 文件中，有两个字符需要特殊处理： &lt; 和 &amp; 。 &lt; 符号用于起始标签，&amp;符号则用于标记 HTML 实体，如果你只是想要显示这些字符的原型，你必须要使用实体的形式，像是 &amp;lt; 和 &amp;amp;。 &amp; 字符尤其让网络文档编写者受折磨，如果你要打「AT&amp;T」 ，你必须要写成「AT&amp;amp;T」。而网址中的 &amp; 字符也要转换。比如你要链接到： http://images.google.com/images?num=30&amp;q=larry+bird 你必须要把网址转换写为： http://images.google.com/images?num=30&amp;amp;q=larry+bird 才能放到链接标签的 href 属性里。不用说也知道这很容易忽略，这也可能是 HTML 标准检验所检查到的错误中，数量最多的。 Markdown 让你可以自然地书写字符，需要转换的由它来处理好了。如果你使用的 &amp; 字符是 HTML 字符实体的一部分，它会保留原状，否则它会被转换成 &amp;amp;。 所以你如果要在文档中插入一个版权符号 ©，你可以这样写： &amp;copy; Markdown 会保留它不动。而若你写： AT&amp;T 与AT&amp;amp;T是一样的 类似的状况也会发生在 &lt; 符号上，因为 Markdown 允许 兼容HTML ，如果你是把 &lt; 符号作为 HTML 标签的定界符使用，那 Markdown 也不会对它做任何转换，但是如果你写： 4&lt;5仍然是4&lt;5 &lt;p&gt; 1&lt;5 5&amp;5 &amp;nbsp;&amp;nbsp;&amp;nbsp;2+2 &lt;p&gt; 1]]></content>
      <categories>
        <category>markdown</category>
      </categories>
      <tags>
        <tag>markdown</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[git入门]]></title>
    <url>%2F2017%2F12%2F09%2Fgit%E5%85%A5%E9%97%A8%2F</url>
    <content type="text"><![CDATA[占个坑 以后写]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>git</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[vim常用命令]]></title>
    <url>%2F2017%2F12%2F09%2Fvim%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4%2F</url>
    <content type="text"><![CDATA[占个坑，以后写]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>vim</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Principles of Information Visualization]]></title>
    <url>%2F2017%2F12%2F09%2FPrinciples-of-Information-Visualization%2F</url>
    <content type="text"><![CDATA[Inroduction 本课程的主要内容是理解如何更清楚地向那些对数据感兴趣的利益相关者传达数据。有许多不同的利益相关者可能对使用视觉材料感兴趣。 例如，你想和同行的数据科学家分享公正的数据表达，他们能够做出自己的推论和解释。但是，您也希望能够与可能熟悉域名但正在寻找具体可操作见解的经理和主管分享数据故事。 在这个课程中将学会得到一个新的可视化技术，你将被要求扩展matplotlib代码库来增强其功能。这是您作为数据科学家的重要一步。要超越使用现成的工具，而是能够修改它们以支持理解数据和问题的新方法。 Tools for Thinking about Design (Alberto Cairo) 首先是抽象和形象 第二个方面是功能性和装饰性 第三个维度是密度和亮度 第四个方面是图形的维度 第五个维度是独创性和熟悉性 最后一个维度是新颖性和冗余性维度 Graphical heuristics: Data-ink ratio (Edward Tufte) introduces two interesting graphical heuristics, the data-ink ratio and chart junk. Tufte的第一个图形启发式是data-ink rate数据墨水比率。 Tufte将数据墨水定义为图形的不可擦除核心。根据所表示的数字的变化排列非冗余墨水,建议我们删除那些不会为图形添加新信息的元素。 另一个启发式称为chartjunk。现在，Tufte比其他形式的非数据墨水更受制于图表垃圾。事实上，他认为统计图上的艺术装饰就像我们数据图形中的杂草。 The Truthful Art (Alberto Cairo) The first quality of a good visualization is that it's truthful. First, we have to be honest with ourselves when we clean and summarize data. The second obligation is to our audience. The second quality of a visualization to consider is whether it is functional or not. The third quality of visualization, Cairo shares is whether it is beautiful or not. The fourth quality of visualization from Cairo is that information graphics should be insightful. The final quality of visualization which Cairo proposes is information graphics should be enlightening]]></content>
      <categories>
        <category>可视化</category>
      </categories>
      <tags>
        <tag>Python</tag>
        <tag>Matplotlib</tag>
        <tag>MachineLearning</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[hello wangjj]]></title>
    <url>%2F2017%2F12%2F08%2Fhello-wangjj%2F</url>
    <content type="text"><![CDATA[hello wanjj 部署hexo]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2017%2F12%2F08%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick Start Create a new post 1$ hexo new "My New Post" More info: Writing Run server 1$ hexo server More info: Server Generate static files 1$ hexo generate More info: Generating Deploy to remote sites 1$ hexo deploy More info: Deployment]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
</search>
